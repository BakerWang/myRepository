<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

	<context:component-scan base-package="com.runlion.shop" />


	<!-- 缓存配置 -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager"> 
		<property name="caches"> <set> <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/> 
		</set> </property> </bean> -->

	<!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
	<!-- Spring提供的基于的Ehcache实现的缓存管理器 -->
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache/ehcache.xml" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>


	<!-- 静态资源访问 -->
	<mvc:resources location="/" mapping="/*.html" />
	<mvc:resources location="/themes/" mapping="/themes/**" />

	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器,顺序执行 -->
		<mvc:interceptor>
			<!-- 如果不配置或/*,将拦截所有的Controller 后台拦截器 -->
			<!-- <mvc:mapping path="/*" /> -->
			<mvc:mapping path="/admin/*" />
			<mvc:mapping path="/admin/**" />
			<mvc:mapping path="/system**/**" />
			<mvc:mapping path="/user**/**" />
			<mvc:mapping path="/module**/**" />
			<mvc:mapping path="/field**/**" />
			<mvc:mapping path="/permission/*" />
			
			<bean class="com.runlion.shop.common.interprecetor.ControllerInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 如果不配置或/*,将拦截所有的Controller 前台拦截器 -->
			<!-- <mvc:mapping path="/*" /> -->
			<mvc:mapping path="/order/**" />
			<mvc:mapping path="/ucenter/**" />
			<mvc:mapping path="/business/**" />
			<bean class="com.runlion.shop.common.interprecetor.FControllerInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，添加拦截器，类级别的处理器映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
			</list>
		</property>
	</bean>

	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射， 配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		<!-- 配置一下对json数据的转换 -->
		<property name="messageConverters">
			<list>
				<bean
					class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"></bean>
			</list>
		</property>

		<property name="webBindingInitializer">
			<bean class="com.runlion.shop.common.executor.DataBindingInitializer" />
		</property>
	</bean>

	<!-- ③：对模型视图名称的解析，即在模型视图名称添加前后缀 InternalResourceViewResolver默认的就是JstlView所以这里就不用配置viewClass了 -->

	<!-- thymeleaf的视图解析器 -->
	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/html/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<!-- Template cache is set to false (default is true). -->
		<property name="cacheable" value="false" />
		<property name="characterEncoding" value="UTF-8" />
	</bean>
	<bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine">
		<property name="templateResolver" ref="templateResolver" />
	</bean>
	<bean id="viewResolverThymeleaf" class="com.runlion.shop.common.component.ThymeleafViewResolverEx">
		<property name="templateEngine" ref="templateEngine" />
		<property name="characterEncoding" value="utf-8" />
		<property name="order" value="0" />
	</bean>

	<bean id="viewResolverCommon"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>

	<!-- 当Spring容器启动完成后执行下面的这个Bean -->
	<bean
		class="com.runlion.shop.common.executor.InstantiationTracingBeanPostProcessor" />


	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<!-- 设置上传文件的最大尺寸为10MB -->
		<property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
	</bean>

	<!-- 1、Scheduler的配置 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="effectPriceTrigger" />
				<ref bean="unionpayTrigger" />

			</list>
		</property>
		<property name="autoStartup" value="true" />
	</bean>

	<!-- 2、Trigger的配置,定义触发时间 -->
	<bean id="effectPriceTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="effectPriceJobDetail" />
		<property name="cronExpression" value="0 0/10 * * * ?" /><!-- 每隔10分钟触发一次 -->
	</bean>
	<bean id="unionpayTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="queryUnionPayJobDetail" />
		<property name="cronExpression" value="0 0/5 * * * ?" /><!-- 格式: 
			[秒] [分] [小时] [日] [月] [周] [年] 每隔5分钟触发一次 -->
	</bean>

	<!-- 3、JobDetail的配置 -->
	<bean id="effectPriceJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="effectPriceJob" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
		<!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	<bean id="queryUnionPayJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="queryUnionPayJob" />
		<property name="targetMethod" value="execute" />
		<property name="concurrent" value="false" />
	</bean>

	<!-- 4、业务类的配置(要调用的 调度工作) -->
	<!-- 价格修改自动生效 -->
	<bean id="effectPriceJob" class="com.runlion.shop.entity.quartz.EffectPriceJob"></bean>
	<!-- 定时查询订单支付状态 -->
	<bean id="queryUnionPayJob" class="com.runlion.shop.entity.quartz.QueryUnionPayJob"></bean>


</beans>  